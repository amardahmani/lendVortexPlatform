package com.loanstorm.user_service;
// Generated by CodiumAI

import com.loanstorm.userservice.model.User;
import com.loanstorm.userservice.repository.UserRepository;
import com.loanstorm.userservice.service.UserServiceImpl;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;


public class UserServiceTest {
    @Autowired
    UserRepository userRepository;

    // Retrieve all users successfully
    @Test
    public void test_retrieve_all_users_successfully() {
        UserRepository userRepository = Mockito.mock(UserRepository.class);
        UserServiceImpl userService = new UserServiceImpl();
        ReflectionTestUtils.setField(userService, "userRepository", userRepository);

        List<User> users = Arrays.asList(
            new User(1L, "user1", "password1", "user1@example.com", "USER", "First1", "Last1", "2023-01-01", "2023-01-01"),
            new User(2L, "user2", "password2", "user2@example.com", "USER", "First2", "Last2", "2023-01-01", "2023-01-01")
        );

        Mockito.when(userRepository.findAll()).thenReturn(users);

        Iterable<User> result = userService.getAllUsers();

        assertNotNull(result);
        assertEquals(users, result);
    }

    // Retrieve a user by non-existent ID
    @Test
    public void test_retrieve_user_by_non_existent_id() {
        UserRepository userRepository = Mockito.mock(UserRepository.class);
        UserServiceImpl userService = new UserServiceImpl();
        ReflectionTestUtils.setField(userService, "userRepository", userRepository);

        long nonExistentId = 999L;
        Mockito.when(userRepository.findById(nonExistentId)).thenReturn(Optional.empty());

        Exception exception = Assertions.assertThrows(RuntimeException.class, () -> {
            userService.getUserById(nonExistentId);
        });

        String expectedMessage = "User not found with id " + nonExistentId;
        String actualMessage = exception.getMessage();

        Assertions.assertTrue(actualMessage.contains(expectedMessage));
    }
    @Test
    public void test_successfully_updates_user() {
        // Arrange
        UserRepository userRepository = Mockito.mock(UserRepository.class);
        UserServiceImpl userService = new UserServiceImpl();
        ReflectionTestUtils.setField(userService, "userRepository", userRepository);

        User existingUser = new User(1L, "oldUsername", "oldPassword", "oldEmail", "oldRole", null, null, "createdAt", "updatedAt");
        User updatedUser = new User(1L, "newUsername", "newPassword", "newEmail", "newRole", null, null, "createdAt", "updatedAt");

        Mockito.when(userRepository.findById(1L)).thenReturn(Optional.of(existingUser));
        Mockito.when(userRepository.save(existingUser)).thenReturn(updatedUser);

        // Act
        User result = userService.editUser(updatedUser);

        // Assert
        Assertions.assertEquals("newUsername", result.getUsername());
        Assertions.assertEquals("newEmail", result.getEmail());
        Assertions.assertEquals("newRole", result.getRole());
        Assertions.assertEquals("newPassword", result.getPassword());
    }

    @Test
    public void test_throws_exception_when_user_not_found() {
        // Arrange
        UserRepository userRepository = Mockito.mock(UserRepository.class);
        UserServiceImpl userService = new UserServiceImpl();
        ReflectionTestUtils.setField(userService, "userRepository", userRepository);

        User nonExistentUser = new User(2L, "username", "password", "email", "role", null, null, "createdAt", "updatedAt");

        Mockito.when(userRepository.findById(2L)).thenReturn(Optional.empty());

        // Act & Assert
        RuntimeException exception = Assertions.assertThrows(RuntimeException.class, () -> {
            userService.editUser(nonExistentUser);
        });

        Assertions.assertEquals("User not found with id 2", exception.getMessage());
    }
}